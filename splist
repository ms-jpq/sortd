#!/usr/bin/env python3

from argparse import ArgumentParser, Namespace
from locale import strxfrm
from plistlib import FMT_BINARY, FMT_XML, dump, loads
from signal import SIG_DFL, SIGPIPE, signal
from sys import stderr, stdin, stdout
from typing import Any

PARSE_FORMATS = {"xml": FMT_XML, "binary": FMT_BINARY}


def recur_sort(data: Any) -> Any:
    if type(data) is dict:
        return {k: recur_sort(data[k]) for k in sorted(data, key=strxfrm)}
    elif type(data) is list:
        return [recur_sort(el) for el in data]
    else:
        return data


def parse_args() -> Namespace:
    formats = PARSE_FORMATS.keys()
    parser = ArgumentParser()
    parser.add_argument("-i", "--input-format", choices=formats)
    parser.add_argument("-o", "--output-format", choices=formats)
    return parser.parse_args()


def main() -> None:
    args = parse_args()
    data = stdin.read()
    try:
        input_fmt = PARSE_FORMATS.get(args.input_format)
        plist = loads(data, fmt=input_fmt)
    except Exception as e:
        print(type(e))
        print(f"ERROR! -- Failed to parse:\n\n{data}", file=stderr)
        exit(1)
    else:
        output_fmt = PARSE_FORMATS.get(args.output_fmt, FMT_XML)
        new = recur_sort(plist)
        dump(new, stdout, fmt=output_fmt)


try:
    signal(SIGPIPE, SIG_DFL)
    main()
except KeyboardInterrupt:
    exit(130)
except BrokenPipeError:
    exit(13)
